"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/negotiator@0.6.3";
exports.ids = ["vendor-chunks/negotiator@0.6.3"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/negotiator@0.6.3/node_modules/negotiator/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/.pnpm/negotiator@0.6.3/node_modules/negotiator/index.js ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*!\n * negotiator\n * Copyright(c) 2012 Federico Romero\n * Copyright(c) 2012-2014 Isaac Z. Schlueter\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */ \nvar preferredCharsets = __webpack_require__(/*! ./lib/charset */ \"(rsc)/./node_modules/.pnpm/negotiator@0.6.3/node_modules/negotiator/lib/charset.js\");\nvar preferredEncodings = __webpack_require__(/*! ./lib/encoding */ \"(rsc)/./node_modules/.pnpm/negotiator@0.6.3/node_modules/negotiator/lib/encoding.js\");\nvar preferredLanguages = __webpack_require__(/*! ./lib/language */ \"(rsc)/./node_modules/.pnpm/negotiator@0.6.3/node_modules/negotiator/lib/language.js\");\nvar preferredMediaTypes = __webpack_require__(/*! ./lib/mediaType */ \"(rsc)/./node_modules/.pnpm/negotiator@0.6.3/node_modules/negotiator/lib/mediaType.js\");\n/**\n * Module exports.\n * @public\n */ module.exports = Negotiator;\nmodule.exports.Negotiator = Negotiator;\n/**\n * Create a Negotiator instance from a request.\n * @param {object} request\n * @public\n */ function Negotiator(request) {\n    if (!(this instanceof Negotiator)) {\n        return new Negotiator(request);\n    }\n    this.request = request;\n}\nNegotiator.prototype.charset = function charset(available) {\n    var set = this.charsets(available);\n    return set && set[0];\n};\nNegotiator.prototype.charsets = function charsets(available) {\n    return preferredCharsets(this.request.headers[\"accept-charset\"], available);\n};\nNegotiator.prototype.encoding = function encoding(available) {\n    var set = this.encodings(available);\n    return set && set[0];\n};\nNegotiator.prototype.encodings = function encodings(available) {\n    return preferredEncodings(this.request.headers[\"accept-encoding\"], available);\n};\nNegotiator.prototype.language = function language(available) {\n    var set = this.languages(available);\n    return set && set[0];\n};\nNegotiator.prototype.languages = function languages(available) {\n    return preferredLanguages(this.request.headers[\"accept-language\"], available);\n};\nNegotiator.prototype.mediaType = function mediaType(available) {\n    var set = this.mediaTypes(available);\n    return set && set[0];\n};\nNegotiator.prototype.mediaTypes = function mediaTypes(available) {\n    return preferredMediaTypes(this.request.headers.accept, available);\n};\n// Backwards compatibility\nNegotiator.prototype.preferredCharset = Negotiator.prototype.charset;\nNegotiator.prototype.preferredCharsets = Negotiator.prototype.charsets;\nNegotiator.prototype.preferredEncoding = Negotiator.prototype.encoding;\nNegotiator.prototype.preferredEncodings = Negotiator.prototype.encodings;\nNegotiator.prototype.preferredLanguage = Negotiator.prototype.language;\nNegotiator.prototype.preferredLanguages = Negotiator.prototype.languages;\nNegotiator.prototype.preferredMediaType = Negotiator.prototype.mediaType;\nNegotiator.prototype.preferredMediaTypes = Negotiator.prototype.mediaTypes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vbmVnb3RpYXRvckAwLjYuMy9ub2RlX21vZHVsZXMvbmVnb3RpYXRvci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0NBTUMsR0FFRDtBQUVBLElBQUlBLG9CQUFvQkMsbUJBQU9BLENBQUM7QUFDaEMsSUFBSUMscUJBQXFCRCxtQkFBT0EsQ0FBQztBQUNqQyxJQUFJRSxxQkFBcUJGLG1CQUFPQSxDQUFDO0FBQ2pDLElBQUlHLHNCQUFzQkgsbUJBQU9BLENBQUM7QUFFbEM7OztDQUdDLEdBRURJLE9BQU9DLE9BQU8sR0FBR0M7QUFDakJGLHlCQUF5QixHQUFHRTtBQUU1Qjs7OztDQUlDLEdBRUQsU0FBU0EsV0FBV0MsT0FBTztJQUN6QixJQUFJLENBQUUsS0FBSSxZQUFZRCxVQUFTLEdBQUk7UUFDakMsT0FBTyxJQUFJQSxXQUFXQztJQUN4QjtJQUVBLElBQUksQ0FBQ0EsT0FBTyxHQUFHQTtBQUNqQjtBQUVBRCxXQUFXRSxTQUFTLENBQUNDLE9BQU8sR0FBRyxTQUFTQSxRQUFRQyxTQUFTO0lBQ3ZELElBQUlDLE1BQU0sSUFBSSxDQUFDQyxRQUFRLENBQUNGO0lBQ3hCLE9BQU9DLE9BQU9BLEdBQUcsQ0FBQyxFQUFFO0FBQ3RCO0FBRUFMLFdBQVdFLFNBQVMsQ0FBQ0ksUUFBUSxHQUFHLFNBQVNBLFNBQVNGLFNBQVM7SUFDekQsT0FBT1gsa0JBQWtCLElBQUksQ0FBQ1EsT0FBTyxDQUFDTSxPQUFPLENBQUMsaUJBQWlCLEVBQUVIO0FBQ25FO0FBRUFKLFdBQVdFLFNBQVMsQ0FBQ00sUUFBUSxHQUFHLFNBQVNBLFNBQVNKLFNBQVM7SUFDekQsSUFBSUMsTUFBTSxJQUFJLENBQUNJLFNBQVMsQ0FBQ0w7SUFDekIsT0FBT0MsT0FBT0EsR0FBRyxDQUFDLEVBQUU7QUFDdEI7QUFFQUwsV0FBV0UsU0FBUyxDQUFDTyxTQUFTLEdBQUcsU0FBU0EsVUFBVUwsU0FBUztJQUMzRCxPQUFPVCxtQkFBbUIsSUFBSSxDQUFDTSxPQUFPLENBQUNNLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRUg7QUFDckU7QUFFQUosV0FBV0UsU0FBUyxDQUFDUSxRQUFRLEdBQUcsU0FBU0EsU0FBU04sU0FBUztJQUN6RCxJQUFJQyxNQUFNLElBQUksQ0FBQ00sU0FBUyxDQUFDUDtJQUN6QixPQUFPQyxPQUFPQSxHQUFHLENBQUMsRUFBRTtBQUN0QjtBQUVBTCxXQUFXRSxTQUFTLENBQUNTLFNBQVMsR0FBRyxTQUFTQSxVQUFVUCxTQUFTO0lBQzNELE9BQU9SLG1CQUFtQixJQUFJLENBQUNLLE9BQU8sQ0FBQ00sT0FBTyxDQUFDLGtCQUFrQixFQUFFSDtBQUNyRTtBQUVBSixXQUFXRSxTQUFTLENBQUNVLFNBQVMsR0FBRyxTQUFTQSxVQUFVUixTQUFTO0lBQzNELElBQUlDLE1BQU0sSUFBSSxDQUFDUSxVQUFVLENBQUNUO0lBQzFCLE9BQU9DLE9BQU9BLEdBQUcsQ0FBQyxFQUFFO0FBQ3RCO0FBRUFMLFdBQVdFLFNBQVMsQ0FBQ1csVUFBVSxHQUFHLFNBQVNBLFdBQVdULFNBQVM7SUFDN0QsT0FBT1Asb0JBQW9CLElBQUksQ0FBQ0ksT0FBTyxDQUFDTSxPQUFPLENBQUNPLE1BQU0sRUFBRVY7QUFDMUQ7QUFFQSwwQkFBMEI7QUFDMUJKLFdBQVdFLFNBQVMsQ0FBQ2EsZ0JBQWdCLEdBQUdmLFdBQVdFLFNBQVMsQ0FBQ0MsT0FBTztBQUNwRUgsV0FBV0UsU0FBUyxDQUFDVCxpQkFBaUIsR0FBR08sV0FBV0UsU0FBUyxDQUFDSSxRQUFRO0FBQ3RFTixXQUFXRSxTQUFTLENBQUNjLGlCQUFpQixHQUFHaEIsV0FBV0UsU0FBUyxDQUFDTSxRQUFRO0FBQ3RFUixXQUFXRSxTQUFTLENBQUNQLGtCQUFrQixHQUFHSyxXQUFXRSxTQUFTLENBQUNPLFNBQVM7QUFDeEVULFdBQVdFLFNBQVMsQ0FBQ2UsaUJBQWlCLEdBQUdqQixXQUFXRSxTQUFTLENBQUNRLFFBQVE7QUFDdEVWLFdBQVdFLFNBQVMsQ0FBQ04sa0JBQWtCLEdBQUdJLFdBQVdFLFNBQVMsQ0FBQ1MsU0FBUztBQUN4RVgsV0FBV0UsU0FBUyxDQUFDZ0Isa0JBQWtCLEdBQUdsQixXQUFXRSxTQUFTLENBQUNVLFNBQVM7QUFDeEVaLFdBQVdFLFNBQVMsQ0FBQ0wsbUJBQW1CLEdBQUdHLFdBQVdFLFNBQVMsQ0FBQ1csVUFBVSIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZWdvdGlhdG9yQDAuNi4zL25vZGVfbW9kdWxlcy9uZWdvdGlhdG9yL2luZGV4LmpzPzk3MDkiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBuZWdvdGlhdG9yXG4gKiBDb3B5cmlnaHQoYykgMjAxMiBGZWRlcmljbyBSb21lcm9cbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSXNhYWMgWi4gU2NobHVldGVyXG4gKiBDb3B5cmlnaHQoYykgMjAxNSBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvblxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcHJlZmVycmVkQ2hhcnNldHMgPSByZXF1aXJlKCcuL2xpYi9jaGFyc2V0JylcbnZhciBwcmVmZXJyZWRFbmNvZGluZ3MgPSByZXF1aXJlKCcuL2xpYi9lbmNvZGluZycpXG52YXIgcHJlZmVycmVkTGFuZ3VhZ2VzID0gcmVxdWlyZSgnLi9saWIvbGFuZ3VhZ2UnKVxudmFyIHByZWZlcnJlZE1lZGlhVHlwZXMgPSByZXF1aXJlKCcuL2xpYi9tZWRpYVR5cGUnKVxuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gTmVnb3RpYXRvcjtcbm1vZHVsZS5leHBvcnRzLk5lZ290aWF0b3IgPSBOZWdvdGlhdG9yO1xuXG4vKipcbiAqIENyZWF0ZSBhIE5lZ290aWF0b3IgaW5zdGFuY2UgZnJvbSBhIHJlcXVlc3QuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVxdWVzdFxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIE5lZ290aWF0b3IocmVxdWVzdCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTmVnb3RpYXRvcikpIHtcbiAgICByZXR1cm4gbmV3IE5lZ290aWF0b3IocmVxdWVzdCk7XG4gIH1cblxuICB0aGlzLnJlcXVlc3QgPSByZXF1ZXN0O1xufVxuXG5OZWdvdGlhdG9yLnByb3RvdHlwZS5jaGFyc2V0ID0gZnVuY3Rpb24gY2hhcnNldChhdmFpbGFibGUpIHtcbiAgdmFyIHNldCA9IHRoaXMuY2hhcnNldHMoYXZhaWxhYmxlKTtcbiAgcmV0dXJuIHNldCAmJiBzZXRbMF07XG59O1xuXG5OZWdvdGlhdG9yLnByb3RvdHlwZS5jaGFyc2V0cyA9IGZ1bmN0aW9uIGNoYXJzZXRzKGF2YWlsYWJsZSkge1xuICByZXR1cm4gcHJlZmVycmVkQ2hhcnNldHModGhpcy5yZXF1ZXN0LmhlYWRlcnNbJ2FjY2VwdC1jaGFyc2V0J10sIGF2YWlsYWJsZSk7XG59O1xuXG5OZWdvdGlhdG9yLnByb3RvdHlwZS5lbmNvZGluZyA9IGZ1bmN0aW9uIGVuY29kaW5nKGF2YWlsYWJsZSkge1xuICB2YXIgc2V0ID0gdGhpcy5lbmNvZGluZ3MoYXZhaWxhYmxlKTtcbiAgcmV0dXJuIHNldCAmJiBzZXRbMF07XG59O1xuXG5OZWdvdGlhdG9yLnByb3RvdHlwZS5lbmNvZGluZ3MgPSBmdW5jdGlvbiBlbmNvZGluZ3MoYXZhaWxhYmxlKSB7XG4gIHJldHVybiBwcmVmZXJyZWRFbmNvZGluZ3ModGhpcy5yZXF1ZXN0LmhlYWRlcnNbJ2FjY2VwdC1lbmNvZGluZyddLCBhdmFpbGFibGUpO1xufTtcblxuTmVnb3RpYXRvci5wcm90b3R5cGUubGFuZ3VhZ2UgPSBmdW5jdGlvbiBsYW5ndWFnZShhdmFpbGFibGUpIHtcbiAgdmFyIHNldCA9IHRoaXMubGFuZ3VhZ2VzKGF2YWlsYWJsZSk7XG4gIHJldHVybiBzZXQgJiYgc2V0WzBdO1xufTtcblxuTmVnb3RpYXRvci5wcm90b3R5cGUubGFuZ3VhZ2VzID0gZnVuY3Rpb24gbGFuZ3VhZ2VzKGF2YWlsYWJsZSkge1xuICByZXR1cm4gcHJlZmVycmVkTGFuZ3VhZ2VzKHRoaXMucmVxdWVzdC5oZWFkZXJzWydhY2NlcHQtbGFuZ3VhZ2UnXSwgYXZhaWxhYmxlKTtcbn07XG5cbk5lZ290aWF0b3IucHJvdG90eXBlLm1lZGlhVHlwZSA9IGZ1bmN0aW9uIG1lZGlhVHlwZShhdmFpbGFibGUpIHtcbiAgdmFyIHNldCA9IHRoaXMubWVkaWFUeXBlcyhhdmFpbGFibGUpO1xuICByZXR1cm4gc2V0ICYmIHNldFswXTtcbn07XG5cbk5lZ290aWF0b3IucHJvdG90eXBlLm1lZGlhVHlwZXMgPSBmdW5jdGlvbiBtZWRpYVR5cGVzKGF2YWlsYWJsZSkge1xuICByZXR1cm4gcHJlZmVycmVkTWVkaWFUeXBlcyh0aGlzLnJlcXVlc3QuaGVhZGVycy5hY2NlcHQsIGF2YWlsYWJsZSk7XG59O1xuXG4vLyBCYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuTmVnb3RpYXRvci5wcm90b3R5cGUucHJlZmVycmVkQ2hhcnNldCA9IE5lZ290aWF0b3IucHJvdG90eXBlLmNoYXJzZXQ7XG5OZWdvdGlhdG9yLnByb3RvdHlwZS5wcmVmZXJyZWRDaGFyc2V0cyA9IE5lZ290aWF0b3IucHJvdG90eXBlLmNoYXJzZXRzO1xuTmVnb3RpYXRvci5wcm90b3R5cGUucHJlZmVycmVkRW5jb2RpbmcgPSBOZWdvdGlhdG9yLnByb3RvdHlwZS5lbmNvZGluZztcbk5lZ290aWF0b3IucHJvdG90eXBlLnByZWZlcnJlZEVuY29kaW5ncyA9IE5lZ290aWF0b3IucHJvdG90eXBlLmVuY29kaW5ncztcbk5lZ290aWF0b3IucHJvdG90eXBlLnByZWZlcnJlZExhbmd1YWdlID0gTmVnb3RpYXRvci5wcm90b3R5cGUubGFuZ3VhZ2U7XG5OZWdvdGlhdG9yLnByb3RvdHlwZS5wcmVmZXJyZWRMYW5ndWFnZXMgPSBOZWdvdGlhdG9yLnByb3RvdHlwZS5sYW5ndWFnZXM7XG5OZWdvdGlhdG9yLnByb3RvdHlwZS5wcmVmZXJyZWRNZWRpYVR5cGUgPSBOZWdvdGlhdG9yLnByb3RvdHlwZS5tZWRpYVR5cGU7XG5OZWdvdGlhdG9yLnByb3RvdHlwZS5wcmVmZXJyZWRNZWRpYVR5cGVzID0gTmVnb3RpYXRvci5wcm90b3R5cGUubWVkaWFUeXBlcztcbiJdLCJuYW1lcyI6WyJwcmVmZXJyZWRDaGFyc2V0cyIsInJlcXVpcmUiLCJwcmVmZXJyZWRFbmNvZGluZ3MiLCJwcmVmZXJyZWRMYW5ndWFnZXMiLCJwcmVmZXJyZWRNZWRpYVR5cGVzIiwibW9kdWxlIiwiZXhwb3J0cyIsIk5lZ290aWF0b3IiLCJyZXF1ZXN0IiwicHJvdG90eXBlIiwiY2hhcnNldCIsImF2YWlsYWJsZSIsInNldCIsImNoYXJzZXRzIiwiaGVhZGVycyIsImVuY29kaW5nIiwiZW5jb2RpbmdzIiwibGFuZ3VhZ2UiLCJsYW5ndWFnZXMiLCJtZWRpYVR5cGUiLCJtZWRpYVR5cGVzIiwiYWNjZXB0IiwicHJlZmVycmVkQ2hhcnNldCIsInByZWZlcnJlZEVuY29kaW5nIiwicHJlZmVycmVkTGFuZ3VhZ2UiLCJwcmVmZXJyZWRNZWRpYVR5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/negotiator@0.6.3/node_modules/negotiator/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/negotiator@0.6.3/node_modules/negotiator/lib/charset.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/negotiator@0.6.3/node_modules/negotiator/lib/charset.js ***!
  \************************************************************************************/
/***/ ((module) => {

eval("/**\n * negotiator\n * Copyright(c) 2012 Isaac Z. Schlueter\n * Copyright(c) 2014 Federico Romero\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */ \n/**\n * Module exports.\n * @public\n */ module.exports = preferredCharsets;\nmodule.exports.preferredCharsets = preferredCharsets;\n/**\n * Module variables.\n * @private\n */ var simpleCharsetRegExp = /^\\s*([^\\s;]+)\\s*(?:;(.*))?$/;\n/**\n * Parse the Accept-Charset header.\n * @private\n */ function parseAcceptCharset(accept) {\n    var accepts = accept.split(\",\");\n    for(var i = 0, j = 0; i < accepts.length; i++){\n        var charset = parseCharset(accepts[i].trim(), i);\n        if (charset) {\n            accepts[j++] = charset;\n        }\n    }\n    // trim accepts\n    accepts.length = j;\n    return accepts;\n}\n/**\n * Parse a charset from the Accept-Charset header.\n * @private\n */ function parseCharset(str, i) {\n    var match = simpleCharsetRegExp.exec(str);\n    if (!match) return null;\n    var charset = match[1];\n    var q = 1;\n    if (match[2]) {\n        var params = match[2].split(\";\");\n        for(var j = 0; j < params.length; j++){\n            var p = params[j].trim().split(\"=\");\n            if (p[0] === \"q\") {\n                q = parseFloat(p[1]);\n                break;\n            }\n        }\n    }\n    return {\n        charset: charset,\n        q: q,\n        i: i\n    };\n}\n/**\n * Get the priority of a charset.\n * @private\n */ function getCharsetPriority(charset, accepted, index) {\n    var priority = {\n        o: -1,\n        q: 0,\n        s: 0\n    };\n    for(var i = 0; i < accepted.length; i++){\n        var spec = specify(charset, accepted[i], index);\n        if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\n            priority = spec;\n        }\n    }\n    return priority;\n}\n/**\n * Get the specificity of the charset.\n * @private\n */ function specify(charset, spec, index) {\n    var s = 0;\n    if (spec.charset.toLowerCase() === charset.toLowerCase()) {\n        s |= 1;\n    } else if (spec.charset !== \"*\") {\n        return null;\n    }\n    return {\n        i: index,\n        o: spec.i,\n        q: spec.q,\n        s: s\n    };\n}\n/**\n * Get the preferred charsets from an Accept-Charset header.\n * @public\n */ function preferredCharsets(accept, provided) {\n    // RFC 2616 sec 14.2: no header = *\n    var accepts = parseAcceptCharset(accept === undefined ? \"*\" : accept || \"\");\n    if (!provided) {\n        // sorted list of all charsets\n        return accepts.filter(isQuality).sort(compareSpecs).map(getFullCharset);\n    }\n    var priorities = provided.map(function getPriority(type, index) {\n        return getCharsetPriority(type, accepts, index);\n    });\n    // sorted list of accepted charsets\n    return priorities.filter(isQuality).sort(compareSpecs).map(function getCharset(priority) {\n        return provided[priorities.indexOf(priority)];\n    });\n}\n/**\n * Compare two specs.\n * @private\n */ function compareSpecs(a, b) {\n    return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;\n}\n/**\n * Get full charset string.\n * @private\n */ function getFullCharset(spec) {\n    return spec.charset;\n}\n/**\n * Check if a spec has any quality.\n * @private\n */ function isQuality(spec) {\n    return spec.q > 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/negotiator@0.6.3/node_modules/negotiator/lib/charset.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/negotiator@0.6.3/node_modules/negotiator/lib/encoding.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/.pnpm/negotiator@0.6.3/node_modules/negotiator/lib/encoding.js ***!
  \*************************************************************************************/
/***/ ((module) => {

eval("/**\n * negotiator\n * Copyright(c) 2012 Isaac Z. Schlueter\n * Copyright(c) 2014 Federico Romero\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */ \n/**\n * Module exports.\n * @public\n */ module.exports = preferredEncodings;\nmodule.exports.preferredEncodings = preferredEncodings;\n/**\n * Module variables.\n * @private\n */ var simpleEncodingRegExp = /^\\s*([^\\s;]+)\\s*(?:;(.*))?$/;\n/**\n * Parse the Accept-Encoding header.\n * @private\n */ function parseAcceptEncoding(accept) {\n    var accepts = accept.split(\",\");\n    var hasIdentity = false;\n    var minQuality = 1;\n    for(var i = 0, j = 0; i < accepts.length; i++){\n        var encoding = parseEncoding(accepts[i].trim(), i);\n        if (encoding) {\n            accepts[j++] = encoding;\n            hasIdentity = hasIdentity || specify(\"identity\", encoding);\n            minQuality = Math.min(minQuality, encoding.q || 1);\n        }\n    }\n    if (!hasIdentity) {\n        /*\n     * If identity doesn't explicitly appear in the accept-encoding header,\n     * it's added to the list of acceptable encoding with the lowest q\n     */ accepts[j++] = {\n            encoding: \"identity\",\n            q: minQuality,\n            i: i\n        };\n    }\n    // trim accepts\n    accepts.length = j;\n    return accepts;\n}\n/**\n * Parse an encoding from the Accept-Encoding header.\n * @private\n */ function parseEncoding(str, i) {\n    var match = simpleEncodingRegExp.exec(str);\n    if (!match) return null;\n    var encoding = match[1];\n    var q = 1;\n    if (match[2]) {\n        var params = match[2].split(\";\");\n        for(var j = 0; j < params.length; j++){\n            var p = params[j].trim().split(\"=\");\n            if (p[0] === \"q\") {\n                q = parseFloat(p[1]);\n                break;\n            }\n        }\n    }\n    return {\n        encoding: encoding,\n        q: q,\n        i: i\n    };\n}\n/**\n * Get the priority of an encoding.\n * @private\n */ function getEncodingPriority(encoding, accepted, index) {\n    var priority = {\n        o: -1,\n        q: 0,\n        s: 0\n    };\n    for(var i = 0; i < accepted.length; i++){\n        var spec = specify(encoding, accepted[i], index);\n        if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\n            priority = spec;\n        }\n    }\n    return priority;\n}\n/**\n * Get the specificity of the encoding.\n * @private\n */ function specify(encoding, spec, index) {\n    var s = 0;\n    if (spec.encoding.toLowerCase() === encoding.toLowerCase()) {\n        s |= 1;\n    } else if (spec.encoding !== \"*\") {\n        return null;\n    }\n    return {\n        i: index,\n        o: spec.i,\n        q: spec.q,\n        s: s\n    };\n}\n/**\n * Get the preferred encodings from an Accept-Encoding header.\n * @public\n */ function preferredEncodings(accept, provided) {\n    var accepts = parseAcceptEncoding(accept || \"\");\n    if (!provided) {\n        // sorted list of all encodings\n        return accepts.filter(isQuality).sort(compareSpecs).map(getFullEncoding);\n    }\n    var priorities = provided.map(function getPriority(type, index) {\n        return getEncodingPriority(type, accepts, index);\n    });\n    // sorted list of accepted encodings\n    return priorities.filter(isQuality).sort(compareSpecs).map(function getEncoding(priority) {\n        return provided[priorities.indexOf(priority)];\n    });\n}\n/**\n * Compare two specs.\n * @private\n */ function compareSpecs(a, b) {\n    return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;\n}\n/**\n * Get full encoding string.\n * @private\n */ function getFullEncoding(spec) {\n    return spec.encoding;\n}\n/**\n * Check if a spec has any quality.\n * @private\n */ function isQuality(spec) {\n    return spec.q > 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/negotiator@0.6.3/node_modules/negotiator/lib/encoding.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/negotiator@0.6.3/node_modules/negotiator/lib/language.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/.pnpm/negotiator@0.6.3/node_modules/negotiator/lib/language.js ***!
  \*************************************************************************************/
/***/ ((module) => {

eval("/**\n * negotiator\n * Copyright(c) 2012 Isaac Z. Schlueter\n * Copyright(c) 2014 Federico Romero\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */ \n/**\n * Module exports.\n * @public\n */ module.exports = preferredLanguages;\nmodule.exports.preferredLanguages = preferredLanguages;\n/**\n * Module variables.\n * @private\n */ var simpleLanguageRegExp = /^\\s*([^\\s\\-;]+)(?:-([^\\s;]+))?\\s*(?:;(.*))?$/;\n/**\n * Parse the Accept-Language header.\n * @private\n */ function parseAcceptLanguage(accept) {\n    var accepts = accept.split(\",\");\n    for(var i = 0, j = 0; i < accepts.length; i++){\n        var language = parseLanguage(accepts[i].trim(), i);\n        if (language) {\n            accepts[j++] = language;\n        }\n    }\n    // trim accepts\n    accepts.length = j;\n    return accepts;\n}\n/**\n * Parse a language from the Accept-Language header.\n * @private\n */ function parseLanguage(str, i) {\n    var match = simpleLanguageRegExp.exec(str);\n    if (!match) return null;\n    var prefix = match[1];\n    var suffix = match[2];\n    var full = prefix;\n    if (suffix) full += \"-\" + suffix;\n    var q = 1;\n    if (match[3]) {\n        var params = match[3].split(\";\");\n        for(var j = 0; j < params.length; j++){\n            var p = params[j].split(\"=\");\n            if (p[0] === \"q\") q = parseFloat(p[1]);\n        }\n    }\n    return {\n        prefix: prefix,\n        suffix: suffix,\n        q: q,\n        i: i,\n        full: full\n    };\n}\n/**\n * Get the priority of a language.\n * @private\n */ function getLanguagePriority(language, accepted, index) {\n    var priority = {\n        o: -1,\n        q: 0,\n        s: 0\n    };\n    for(var i = 0; i < accepted.length; i++){\n        var spec = specify(language, accepted[i], index);\n        if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\n            priority = spec;\n        }\n    }\n    return priority;\n}\n/**\n * Get the specificity of the language.\n * @private\n */ function specify(language, spec, index) {\n    var p = parseLanguage(language);\n    if (!p) return null;\n    var s = 0;\n    if (spec.full.toLowerCase() === p.full.toLowerCase()) {\n        s |= 4;\n    } else if (spec.prefix.toLowerCase() === p.full.toLowerCase()) {\n        s |= 2;\n    } else if (spec.full.toLowerCase() === p.prefix.toLowerCase()) {\n        s |= 1;\n    } else if (spec.full !== \"*\") {\n        return null;\n    }\n    return {\n        i: index,\n        o: spec.i,\n        q: spec.q,\n        s: s\n    };\n}\n/**\n * Get the preferred languages from an Accept-Language header.\n * @public\n */ function preferredLanguages(accept, provided) {\n    // RFC 2616 sec 14.4: no header = *\n    var accepts = parseAcceptLanguage(accept === undefined ? \"*\" : accept || \"\");\n    if (!provided) {\n        // sorted list of all languages\n        return accepts.filter(isQuality).sort(compareSpecs).map(getFullLanguage);\n    }\n    var priorities = provided.map(function getPriority(type, index) {\n        return getLanguagePriority(type, accepts, index);\n    });\n    // sorted list of accepted languages\n    return priorities.filter(isQuality).sort(compareSpecs).map(function getLanguage(priority) {\n        return provided[priorities.indexOf(priority)];\n    });\n}\n/**\n * Compare two specs.\n * @private\n */ function compareSpecs(a, b) {\n    return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;\n}\n/**\n * Get full language string.\n * @private\n */ function getFullLanguage(spec) {\n    return spec.full;\n}\n/**\n * Check if a spec has any quality.\n * @private\n */ function isQuality(spec) {\n    return spec.q > 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/negotiator@0.6.3/node_modules/negotiator/lib/language.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/negotiator@0.6.3/node_modules/negotiator/lib/mediaType.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/.pnpm/negotiator@0.6.3/node_modules/negotiator/lib/mediaType.js ***!
  \**************************************************************************************/
/***/ ((module) => {

eval("/**\n * negotiator\n * Copyright(c) 2012 Isaac Z. Schlueter\n * Copyright(c) 2014 Federico Romero\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */ \n/**\n * Module exports.\n * @public\n */ module.exports = preferredMediaTypes;\nmodule.exports.preferredMediaTypes = preferredMediaTypes;\n/**\n * Module variables.\n * @private\n */ var simpleMediaTypeRegExp = /^\\s*([^\\s\\/;]+)\\/([^;\\s]+)\\s*(?:;(.*))?$/;\n/**\n * Parse the Accept header.\n * @private\n */ function parseAccept(accept) {\n    var accepts = splitMediaTypes(accept);\n    for(var i = 0, j = 0; i < accepts.length; i++){\n        var mediaType = parseMediaType(accepts[i].trim(), i);\n        if (mediaType) {\n            accepts[j++] = mediaType;\n        }\n    }\n    // trim accepts\n    accepts.length = j;\n    return accepts;\n}\n/**\n * Parse a media type from the Accept header.\n * @private\n */ function parseMediaType(str, i) {\n    var match = simpleMediaTypeRegExp.exec(str);\n    if (!match) return null;\n    var params = Object.create(null);\n    var q = 1;\n    var subtype = match[2];\n    var type = match[1];\n    if (match[3]) {\n        var kvps = splitParameters(match[3]).map(splitKeyValuePair);\n        for(var j = 0; j < kvps.length; j++){\n            var pair = kvps[j];\n            var key = pair[0].toLowerCase();\n            var val = pair[1];\n            // get the value, unwrapping quotes\n            var value = val && val[0] === '\"' && val[val.length - 1] === '\"' ? val.substr(1, val.length - 2) : val;\n            if (key === \"q\") {\n                q = parseFloat(value);\n                break;\n            }\n            // store parameter\n            params[key] = value;\n        }\n    }\n    return {\n        type: type,\n        subtype: subtype,\n        params: params,\n        q: q,\n        i: i\n    };\n}\n/**\n * Get the priority of a media type.\n * @private\n */ function getMediaTypePriority(type, accepted, index) {\n    var priority = {\n        o: -1,\n        q: 0,\n        s: 0\n    };\n    for(var i = 0; i < accepted.length; i++){\n        var spec = specify(type, accepted[i], index);\n        if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\n            priority = spec;\n        }\n    }\n    return priority;\n}\n/**\n * Get the specificity of the media type.\n * @private\n */ function specify(type, spec, index) {\n    var p = parseMediaType(type);\n    var s = 0;\n    if (!p) {\n        return null;\n    }\n    if (spec.type.toLowerCase() == p.type.toLowerCase()) {\n        s |= 4;\n    } else if (spec.type != \"*\") {\n        return null;\n    }\n    if (spec.subtype.toLowerCase() == p.subtype.toLowerCase()) {\n        s |= 2;\n    } else if (spec.subtype != \"*\") {\n        return null;\n    }\n    var keys = Object.keys(spec.params);\n    if (keys.length > 0) {\n        if (keys.every(function(k) {\n            return spec.params[k] == \"*\" || (spec.params[k] || \"\").toLowerCase() == (p.params[k] || \"\").toLowerCase();\n        })) {\n            s |= 1;\n        } else {\n            return null;\n        }\n    }\n    return {\n        i: index,\n        o: spec.i,\n        q: spec.q,\n        s: s\n    };\n}\n/**\n * Get the preferred media types from an Accept header.\n * @public\n */ function preferredMediaTypes(accept, provided) {\n    // RFC 2616 sec 14.2: no header = */*\n    var accepts = parseAccept(accept === undefined ? \"*/*\" : accept || \"\");\n    if (!provided) {\n        // sorted list of all types\n        return accepts.filter(isQuality).sort(compareSpecs).map(getFullType);\n    }\n    var priorities = provided.map(function getPriority(type, index) {\n        return getMediaTypePriority(type, accepts, index);\n    });\n    // sorted list of accepted types\n    return priorities.filter(isQuality).sort(compareSpecs).map(function getType(priority) {\n        return provided[priorities.indexOf(priority)];\n    });\n}\n/**\n * Compare two specs.\n * @private\n */ function compareSpecs(a, b) {\n    return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;\n}\n/**\n * Get full type string.\n * @private\n */ function getFullType(spec) {\n    return spec.type + \"/\" + spec.subtype;\n}\n/**\n * Check if a spec has any quality.\n * @private\n */ function isQuality(spec) {\n    return spec.q > 0;\n}\n/**\n * Count the number of quotes in a string.\n * @private\n */ function quoteCount(string) {\n    var count = 0;\n    var index = 0;\n    while((index = string.indexOf('\"', index)) !== -1){\n        count++;\n        index++;\n    }\n    return count;\n}\n/**\n * Split a key value pair.\n * @private\n */ function splitKeyValuePair(str) {\n    var index = str.indexOf(\"=\");\n    var key;\n    var val;\n    if (index === -1) {\n        key = str;\n    } else {\n        key = str.substr(0, index);\n        val = str.substr(index + 1);\n    }\n    return [\n        key,\n        val\n    ];\n}\n/**\n * Split an Accept header into media types.\n * @private\n */ function splitMediaTypes(accept) {\n    var accepts = accept.split(\",\");\n    for(var i = 1, j = 0; i < accepts.length; i++){\n        if (quoteCount(accepts[j]) % 2 == 0) {\n            accepts[++j] = accepts[i];\n        } else {\n            accepts[j] += \",\" + accepts[i];\n        }\n    }\n    // trim accepts\n    accepts.length = j + 1;\n    return accepts;\n}\n/**\n * Split a string of parameters.\n * @private\n */ function splitParameters(str) {\n    var parameters = str.split(\";\");\n    for(var i = 1, j = 0; i < parameters.length; i++){\n        if (quoteCount(parameters[j]) % 2 == 0) {\n            parameters[++j] = parameters[i];\n        } else {\n            parameters[j] += \";\" + parameters[i];\n        }\n    }\n    // trim parameters\n    parameters.length = j + 1;\n    for(var i = 0; i < parameters.length; i++){\n        parameters[i] = parameters[i].trim();\n    }\n    return parameters;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/negotiator@0.6.3/node_modules/negotiator/lib/mediaType.js\n");

/***/ })

};
;